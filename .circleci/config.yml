version: 2.1

executors:
  metal:
    docker:
      - image: circleci/elixir:1.10.2
      - image: circleci/postgres:9.6
        environment:
          MIX_ENV: test
          POSTGRES_USER: omisego_dev
          POSTGRES_PASSWORD: omisego_dev
          POSTGRES_DB: omisego_test
          CIRLCECI: true
    working_directory: ~/src

  metal_macos:
    macos:
      xcode: "11.0.0"

  builder:
    docker:
      - image: omisegoimages/elixir-omg-builder:stable-20201207
    working_directory: ~/src

  builder_pg:
    docker:
      - image: omisegoimages/elixir-omg-builder:stable-20201207
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: omisego_dev
          POSTGRES_PASSWORD: omisego_dev
          POSTGRES_DB: omisego_test
    working_directory: ~/src

  builder_pg_geth:
    docker:
      - image: omisegoimages/elixir-omg-tester:stable-20201207
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: omisego_dev
          POSTGRES_PASSWORD: omisego_dev
          POSTGRES_DB: omisego_test
    working_directory: ~/src

  deployer:
    docker:
      - image: omisegoimages/elixir-omg-deploy:stable-20201207
    working_directory: ~/src

commands:

  add_rust_to_path:
    description: "Add path to PATH env var"
    steps:
      - run:
          name: Add rust to PATH env
          command: echo 'export PATH=~/.cargo/bin/:$PATH' >> $BASH_ENV
  install_rust:
    description: "Install Rust"
    steps:
      - run:
          name: Install Rust
          command: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      - add_rust_to_path

  setup_elixir-omg_workspace:
    description: "Setup workspace"
    steps:
      - attach_workspace:
          name: Attach workspace
          at: .

  docker_login:
    description: login to dockerhub for private repo access
    steps:
      - run: printf "%s\\n" "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin

  make_docker_images:
    description: Builds docker images
    steps:
      - restore_cache:
          key: make_docker_images-{{ checksum "mix.lock" }}
      - run: rm -rf _build_docker/prod/lib/omg*
      - run: make docker-child_chain
      - save_cache:
          key: make_docker_images-{{ checksum "mix.lock" }}
          paths:
            - "deps_docker/"
            - "_build_docker/"

  install_elixir:
    parameters:
      cache:
        type: string
      dir:
        type: string
    description: Installs elixir and checks if docker is healthy
    steps:
      - restore_cache:
          key: v8-asdf-install-<<parameters.cache>>
      - run:
          name: Install Erlang and Elixir
          command: |
            cd <<parameters.dir>>
            [ -d ~/.asdf-vm ] || git clone https://github.com/asdf-vm/asdf.git ~/.asdf-vm --branch v0.8.0
            echo 'source ~/.asdf-vm/asdf.sh' >> $BASH_ENV
            source $BASH_ENV
            asdf plugin-add erlang || asdf plugin-update erlang
            asdf plugin-add elixir || asdf plugin-update elixir
            asdf plugin-add rust || asdf plugin-update rust
            asdf install
          no_output_timeout: 4400
      - install_rust
      - save_cache:
          key: v8-asdf-install-<<parameters.cache>>
          paths:
            - ~/.asdf
            - ~/.asdf-vm
      - run: |
          cd <<parameters.dir>>
          make install-hex-rebar

jobs:
  barebuild:
    executor: metal
    environment:
      MIX_ENV: test
    steps:
      - checkout
      - run: make install-hex-rebar
      - run: echo 'export PATH=~/.cargo/bin:$PATH' >> $BASH_ENV
      - run:
          command: ./bin/setup
          no_output_timeout: 2400
      - run: make deps-elixir-omg
      - run: ERLANG_ROCKSDB_BUILDOPTS='-j 2' make build-test
      - run: mix test
      - run:
          name: Integration Tests
          command: |
            # Slow, serial integration test, run nightly. Here to make sure the standard `mix test --only integration --trace` works
            export SHELL=/bin/bash
            mix test --only integration --trace
          no_output_timeout: 30m
  barebuild_macos:
    executor: metal_macos
    environment:
      MIX_ENV: test
    steps:
      - checkout
      - run:
          command: |
            brew install postgres
            initdb /usr/local/var/postgres/data
            pg_ctl -D /usr/local/var/postgres/data -l /tmp/postgresql.log start
            psql template1 \<<EOF
            CREATE USER omisego_dev WITH CREATEDB ENCRYPTED PASSWORD 'omisego_dev';
            CREATE DATABASE omisego_dev OWNER 'omisego_dev';
            EOF
      - restore_cache:
          key: v8-asdf-install-barebuild_macos
      - run: |
          set -e
          [ -d ~/.asdf-vm ] || git clone https://github.com/asdf-vm/asdf.git ~/.asdf-vm --branch v0.8.0
          echo 'source ~/.asdf-vm/asdf.sh' >> $BASH_ENV
      - run: |
          set -e
          source $BASH_ENV
          if ! asdf plugin-list | grep erlang; then
            asdf plugin-add erlang https://github.com/asdf-vm/asdf-erlang.git
          else
            asdf plugin-update erlang
          fi
          if ! asdf plugin-list | grep elixir; then
            asdf plugin-add elixir https://github.com/asdf-vm/asdf-elixir.git
          else
            asdf plugin-update elixir
          fi
          if ! asdf plugin-list | grep rust; then
            asdf plugin-add rust https://github.com/code-lever/asdf-rust.git
          else
            asdf plugin-update rust
          fi
          asdf install
      - install_rust
      - save_cache:
          key: v8-asdf-install-barebuild_macos
          paths:
            - ~/.asdf
            - ~/.asdf-vm
      - run: make init_test
      - run:
          command: ./bin/setup
          no_output_timeout: 2400
      - run: make deps-elixir-omg
      - run: ERLANG_ROCKSDB_BUILDOPTS='-j 2' make build-test
      - run: mix test
  build:
    executor: builder
    environment:
      MIX_ENV: test
    steps:
      - checkout
      - restore_cache:
          key: v8-rocksdb-cache-{{ checksum "mix.lock" }}
      - run: make init_test
      - run: make deps-elixir-omg
      - run: ERLANG_ROCKSDB_BUILDOPTS='-j 2' make build-test
      - save_cache:
          key: v8-mix-cache-test-compile-{{ checksum "mix.lock" }}-{{ .Branch }}-{{ .Revision }}
          paths: "_build_docker"
      - save_cache:
          key: v8-rocksdb-cache-{{ checksum "mix.lock" }}
          paths:
            - "deps_docker/"
            - "deps_docker/rocksdb"
            - "_build_docker/test/lib/rocksdb/"
            - "_build_docker/test/dev/rocksdb/"
            - "deps/"
            - "_build/test/lib/rocksdb/"
            - "_build/test/dev/rocksdb/"
      - persist_to_workspace:
          name: Persist workspace
          root: ~/src
          paths:
            - .circleci
            - dialyzer.ignore-warnings
            - .formatter.exs
            - _build_docker
            - .credo.exs
            - apps
            - bin
            - config
            - deps_docker
            - doc
            - mix.exs
            - mix.lock
            - deploy_and_populate.sh
            - launcher.py
            - docker-compose.yml
            - rel/
            - VERSION
            - .git
            - Makefile
            - priv
            - data
            - snapshots.env
            - snapshot_reorg.env
            - nginx.conf
            - contract_addresses_template.env
            - localchain_contract_addresses.env


  audit_deps:
    executor: builder
    environment:
      MIX_ENV: test
    steps:
      - setup_elixir-omg_workspace
      - run: mix deps.audit

  lint:
    executor: builder
    environment:
      MIX_ENV: test
    steps:
      - setup_elixir-omg_workspace
      - run: make install-hex-rebar
      - run: mix do compile --warnings-as-errors --force, credo --ignore-checks Credo.Check.Readability.SinglePipe, format --check-formatted --dry-run
      - run:
          command: |
            export SHELL=/bin/bash
            set +eo pipefail
            _counter=$(mix credo --only Credo.Check.Readability.SinglePipe | grep -c "Use a function call when a pipeline is only one function long")
            echo "Current Credo.Check.Readability.SinglePipe occurrences:"
            echo $_counter
            if [ $_counter -gt 38 ]; then
              echo "Have you been naughty or nice? Find out if Santa knows."
              exit 1
            fi


  lint_version:
    executor: builder
    steps:
      - setup_elixir-omg_workspace
      - run:
          command: |
            if [ -n "$CIRCLE_TAG" ]; then
              _tagged_version="${CIRCLE_TAG#*v}"
              _tagged_version_ignoring_pre="${_tagged_version%%-pre.*}"
              _filed_version="$(head -n 1 ./VERSION | sed 's/^[ \t]*//;s/[ \t]*$//')"

              if [ "$_tagged_version_ignoring_pre" != "$_filed_version" ]; then
                echo "The git tag \"${CIRCLE_TAG}\" expects the VERSION to be \"${_tagged_version_ignoring_pre}\". Got \"${_filed_version}\"."
                exit 1
              fi
            else
              echo "This build is not version-tagged. Skipping version lint."
              exit 0
            fi

  sobelow:
    executor: builder_pg
    environment:
      MIX_ENV: test
    steps:
      - setup_elixir-omg_workspace
      - run: mix archive.install hex sobelow --force
      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r .
      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r apps/omg
      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r apps/omg_bus
      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r apps/omg_child_chain
      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r apps/omg_child_chain_rpc --router apps/omg_child_chain_rpc/lib/omg_child_chain_rpc/web/router.ex
      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r apps/omg_db
      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r apps/omg_eth
      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r apps/omg_status
      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r apps/omg_utils

  child_chain_integration_tests:
    executor: builder_pg_geth
    environment:
      MIX_ENV: test
    steps:
      - setup_elixir-omg_workspace
      - restore_cache:
          keys:
            - v8-mix-cache-test-compile-{{ checksum "mix.lock" }}-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Compile
          command: mix compile
      - run:
          name: Integration Tests Part Child Chain
          command: |
            export SHELL=/bin/bash
            mix test --include child_chain --exclude common --exclude test

  common_integration_tests:
    executor: builder_pg_geth
    environment:
      MIX_ENV: test
    steps:
      - setup_elixir-omg_workspace
      - restore_cache:
          keys:
            - v8-mix-cache-test-compile-{{ checksum "mix.lock" }}-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Compile
          command: mix compile
      - run:
          name: Integration Tests Part Common
          command: |
            export SHELL=/bin/bash
            mix test --include common --exclude child_chain --exclude test

  test:
    executor: builder_pg
    environment:
      MIX_ENV: test
    steps:
      - setup_elixir-omg_workspace
      - restore_cache:
          keys:
            - v8-mix-cache-test-compile-{{ checksum "mix.lock" }}-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Compile
          command: mix compile
      - run:
          name: Test
          command: |
            export SHELL=/bin/bash
            mix test --exclude common --exclude child_chain

  property_tests:
    executor: builder_pg_geth
    environment:
      MIX_ENV: test
    steps:
      - setup_elixir-omg_workspace
      - restore_cache:
          keys:
            - v8-mix-cache-test-compile-{{ checksum "mix.lock" }}-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Compile
          command: mix compile
      - run:
          name: Property Test
          command: |
            export SHELL=/bin/bash
            # no coverage calculation, coverage is on the other tests
            mix test --only property --trace

  integration_tests:
    executor: builder_pg_geth
    environment:
      MIX_ENV: test
    steps:
      - setup_elixir-omg_workspace
      - restore_cache:
          keys:
            - v8-mix-cache-test-compile-{{ checksum "mix.lock" }}-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Compile
          command: mix compile
      - run:
          name: Integration Tests
          command: |
            # Slow, serial integration test, run nightly. Here to make sure the standard `mix test --trace --only integration` works
            export SHELL=/bin/bash
            mix test --only integration

  dialyzer:
    executor: builder_pg
    steps:
      - setup_elixir-omg_workspace
      - restore_cache:
          keys:
            - v8-plt-cache-{{ ".tool-versions" }}-{{ checksum "mix.lock" }}
            - v8-plt-cache-{{ ".tool-versions" }}-{{ checksum "mix.exs" }}
            - v8-plt-cache-{{ ".tool-versions" }}
      - run:
          name: Unpack PLT cache
          command: |
            mkdir -p _build_docker/test
            cp plts/dialyxir*.plt _build_docker/test/ || true
            mkdir -p ~/.mix
            cp plts/dialyxir*.plt ~/.mix/ || true
      - run: mix dialyzer --plt
      - run:
          name: Pack PLT cache
          command: |
            mkdir -p plts
            cp _build_docker/test/dialyxir*.plt plts/
            cp ~/.mix/dialyxir*.plt plts/
      - save_cache:
          key: v8-plt-cache-{{ ".tool-versions" }}-{{ checksum "mix.lock" }}
          paths:
            - plts
      - save_cache:
          key: v8-plt-cache-{{ ".tool-versions" }}-{{ checksum "mix.exs" }}
          paths:
            - plts
      - save_cache:
          key: v8-plt-cache-{{ ".tool-versions" }}
          paths:
            - plts
      - run: mix dialyzer --format short

  test_docker_compose_release:
    machine:
      image: ubuntu-2004:202010-01
    environment:
      SNAPSHOT: SNAPSHOT_MIX_EXIT_PERIOD_SECONDS_120
    parallelism: 4
    steps:
      - checkout
      - run:
          name: "Pull Submodules - specs"
          command: |
            git submodule init
            git submodule update --remote
      - run:
          name: Setup data dir
          command: |
            [ -d data ] || mkdir data && chmod 777 data
      - docker_login
      - make_docker_images
      - run:
          name: Start daemon services
          command: make cabbage-start-services
      - run:
          name: docker services logs
          working_directory: ~/project/
          background: true
          command: docker-compose logs -f
      - restore_cache:
          key: docker_compose_release-cabbage-{{ checksum "~/project/priv/cabbage/mix.lock" }}
      - run:
          no_output_timeout: 30m
          command: |
            cd ~/project/priv/cabbage
            TESTFILES=$(circleci tests glob "apps/itest/test/itest/*_test.exs" | circleci tests split --split-by=timings --show-counts | tr '\r\n' ' ')
            echo ${TESTFILES}
            cd ~/project/
            docker run --rm -it --network=chain_net \
            --user=root \
            -e FEE_CLAIMER_ADDRESS=0x3b9f4c1dd26e0be593373b1d36cee2008cbeb837 \
            -e MIX_ENV=test \
            -e PLASMA_CONTRACTS_DIR=/app/data/plasma-contracts/contracts/ \
            -e LOCALCHAIN_CONTRACT_ADDRESSES=/app/localchain_contract_addresses.env \
            -e DOCKER=true \
            -e WATCHER_URL=http://172.27.0.104:7434 \
            -e WATCHER_INFO_URL=http://172.27.0.105:7534 \
            -e CHILD_CHAIN_URL=http://172.27.0.108:9656/ \
            -e ETHEREUM_RPC_URL=http://172.27.0.108:80 \
            -e ETHEREUM_WS_URL=ws://172.27.0.108:81 \
            -e EXIT_ID_SIZE=160 \
            -e SHELL=/bin/sh \
            -v $(pwd):/app \
            --entrypoint /bin/sh \
            "omisego/childchain-builder:dev-6b9e25f" -c "cd /app/priv/cabbage && apk add maven && apk add jq && make install && make generate_api_code && mix deps.get && mix test ${TESTFILES} --trace"
      - store_test_results:
          path: ~/project/priv/cabbage/_build/test/lib/itest/
      - save_cache:
          key: docker_compose_release-cabbage-{{ checksum "~/project/priv/cabbage/mix.lock" }}
          paths:
            - ~/project/priv/cabbage/deps
            - ~/project/priv/cabbage/_build

  test_docker_compose_reorg:
    machine:
      image: ubuntu-2004:202010-01
    environment:
      REORG: true
    steps:
      - checkout
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update --remote
      - run:
          name: Setup data dir
          command: |
            [ -d data1 ] || mkdir data1 && chmod 777 data1
            [ -d data2 ] || mkdir data2 && chmod 777 data2
            [ -d data ] || mkdir data && chmod 777 data
      - docker_login
      - make_docker_images
      - run:
          name: Start daemon services
          command: make cabbage-start-services-reorg
      - run: sh .circleci/status.sh
      - run:
          name: Print watcher logs
          command: make cabbage-reorg-watcher-logs
          background: true
      - run:
          name: Print watcher_info logs
          command: make cabbage-reorg-watcher_info-logs
          background: true
      - run:
          name: Print childchain logs
          command: make cabbage-reorg-childchain-logs
          background: true
      - run:
          name: Print geth logs
          command: make cabbage-reorg-geth-logs
          background: true
      - run:
          name: Print reorg logs
          command: make cabbage-reorgs-logs
          background: true
      - install_elixir:
          cache: "test_docker_compose_release_cabbage"
          dir: "~/project/priv/cabbage"
      - run:
          name: Setup specs
          working_directory: "~/project/priv/cabbage"
          command: |
            make install
            make generate_api_code
            mix deps.get
          no_output_timeout: 30m
      - run:
          name: Run specs
          working_directory: "~/project/priv/cabbage"
          command: |
            mix test --only deposit --trace
          no_output_timeout: 30m

  test_barebone_release:
    machine:
      image: ubuntu-2004:202010-01
    environment:
      TERM: xterm-256color
    steps:
      - checkout
      - docker_login
      - run:
          name: Start geth, feefeed and pull in blockchain snapshot
          command: make start-services
          background: true
      - run: sudo chmod 777 data/
      - install_elixir:
          cache: "test_barebone_release"
          dir: "~/project"
      - run:
          name: Install deps
          command: |
            set -e
            sudo killall dpkg || true &&
            sudo rm /var/lib/dpkg/lock || true &&
            sudo rm /var/cache/apt/archives/lock || true &&
            sudo dpkg --configure -a || true &&
            sudo apt-get update &&
            ./bin/setup
          no_output_timeout: 2400
      - run: make install-hex-rebar
      - restore_cache:
          key: v3-dev-release-cache-{{ checksum "mix.lock" }}
      - run:
          name: Run Child Chain
          command: |
            set -e
            mix deps.get
            make start-child_chain OVERRIDING_START=start_iex OVERRIDING_VARIABLES=./bin/variables_test_barebone
          background: true
          no_output_timeout: 2400
      - run:
          name: Has Childchain started?
          command: |
            attempt_counter=0
            max_attempts=100
            until $(curl --output /dev/null --silent --head --fail http://localhost:9656/alarm.get); do
              if [ ${attempt_counter} -eq ${max_attempts} ];then
                echo "Max attempts reached"
                exit 1
              fi
              printf '.'
              attempt_counter=$(($attempt_counter+1))
              sleep 5
            done

  publish_child_chain:
    machine:
      image: ubuntu-2004:202010-01
    environment:
      CHILD_CHAIN_IMAGE_NAME: "omisego/child_chain"
    steps:
      - checkout
      - run: make docker-child_chain CHILD_CHAIN_IMAGE_NAME=$CHILD_CHAIN_IMAGE_NAME
      - run: IMAGE_NAME=$CHILD_CHAIN_IMAGE_NAME sh .circleci/ci_publish.sh

  increase_chart_version_master:
    docker:
      - image: cimg/base:2020.01
    environment:
      CHART_NAME: childchain
      HELM_CHART_REPO: helm-development
      UPDATE_DEV: true
    steps:
      - checkout
      - run: APP_VERSION="$(echo "$CIRCLE_SHA1" | head -c 7)" sh .circleci/ci_increase_chart_version.sh

  increase_chart_version_release:
    docker:
      - image: cimg/base:2020.01
    environment:
      CHART_NAME: childchain
      HELM_CHART_REPO: helm-development
      UPDATE_DEV: false
    steps:
      - checkout
      - run: APP_VERSION="${CIRCLE_TAG#*v}" sh .circleci/ci_increase_chart_version.sh

  notify_services:
    executor: builder_pg
    steps:
      - run:
          name: Send development deployment markers
          command: |
            curl -X POST -H 'Content-type: application/json' -d '{"title": "Starting Service", "text": "Starting with git SHA '"$CIRCLE_SHA1"'", "alert_type": "info" }' 'https://app.datadoghq.com/api/v1/events?api_key='"$DD_API_KEY"''
            curl -X POST -H 'Content-type: application/json' -H 'Authorization: Bearer '"$SENTRY_TOKEN"'' -d '{"projects": ["omgnetwork/omg-childchain-v1"], "ref": "'"$CIRCLE_SHA1"'", "version": "ChildChain-'"$CIRCLE_SHA1"'"}' 'https://sentry.io/api/0/organizations/omisego/releases/'
            GH_URL="https://github.com/omisego/omgnetwork/tree/${CIRCLE_BRANCH}"
            CIRCLE_URL="https://circleci.com/gh/omgnetwork/omg-childchain-v1/${CIRCLE_BUILD_NUM}"
            WORKFLOW_URL="https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}"
            MESSAGE="omgnetwork/omg-childchain-v1 branch ${CIRCLE_BRANCH} has deployed a new version"
            RICH_MESSAGE="*omgnetwork/omg-childchain-v1* branch *${CIRCLE_BRANCH}* has been deployed"
            curl -X POST -H 'Content-Type: application/json' --data "{ \
              \"attachments\": [ \
                { \
                  \"fallback\": \"${MESSAGE}\", \
                  \"text\": \"Deployment: ${RICH_MESSAGE}\", \
                  \"mrkdwn\": true, \
                  \"color\": \"#2ced49\", \
                  \"fields\": [ \
                    { \
                      \"title\": \"Git SHA\", \
                      \"value\": \"<$GH_URL|$CIRCLE_SHA1>\", \
                      \"short\": true \
                    }, { \
                      \"title\": \"Branch\", \
                      \"value\": \"<$GH_URL|$CIRCLE_BRANCH>\", \
                      \"short\": true \
                    }, { \
                      \"title\": \"Build\", \
                      \"value\": \"<$CIRCLE_URL|$CIRCLE_BUILD_NUM>\", \
                      \"short\": true \
                    } \
                  ] \
                } \
              ] \
            }" ${SLACK_WEBHOOK}

workflows:
  version: 2
  nightly:
    triggers:
      - schedule:
          cron: "30 8 * * 1-5"
          filters:
            branches:
              only:
                - master
    jobs:
      - build
      - integration_tests:
          requires: [build]
      - barebuild_macos
      #- test_barebone_release
  build-test-deploy:
    jobs:
      - build:
          filters: &all_branches_and_tags
            branches:
              only: /.+/
            tags:
              only: /.+/
      # - barebuild_macos:
      #     filters: *all_branches_and_tags
      # - test_barebone_release:
      #     filters: *all_branches_and_tags
      - notify_services:
          requires: [increase_chart_version_master]
          filters:
            branches:
              only:
                - master
      - child_chain_integration_tests:
          requires: [build]
          filters: *all_branches_and_tags
      - common_integration_tests:
          requires: [build]
          filters: *all_branches_and_tags
      - test_docker_compose_release:
          filters: *all_branches_and_tags
      - test_docker_compose_reorg:
           filters: &master_and_version_branches_and_all_tags
            branches:
              only:
                - master
                # vMAJOR.MINOR (e.g. v0.1, v0.2, v1.0, v2.1, etc.)
                - /^v[0-9]+\.[0-9]+/
            tags:
              only:
                - /.+/
      - audit_deps:
          requires: [build]
          filters: *all_branches_and_tags
      - lint:
          requires: [build]
          filters: *all_branches_and_tags
      - lint_version:
          requires: [build]
          filters: *all_branches_and_tags
      - sobelow:
          requires: [build]
          filters: *all_branches_and_tags
      - dialyzer:
          requires: [build]
          filters: *all_branches_and_tags
      - test:
          requires: [build]
          filters: *all_branches_and_tags
      - property_tests:
          requires: [build]
          filters: &master_and_version_branches_and_all_tags
            branches:
              only:
                - master
                # vMAJOR.MINOR (e.g. v0.1, v0.2, v1.0, v2.1, etc.)
                - /^v[0-9]+\.[0-9]+/
            tags:
              only:
                - /.+/
      # Publish in case of master branch, version branches and version tags.
      - publish_child_chain:
          requires:
            [
              test_docker_compose_release,
              #test_barebone_release,
              test_docker_compose_reorg,
              child_chain_integration_tests,
              common_integration_tests,
              test,
              property_tests,
              dialyzer,
              lint,
              lint_version,
              audit_deps
            ]
          filters: &master_and_version_branches_and_all_tags
            branches:
              only:
                - master
                # vMAJOR.MINOR (e.g. v0.1, v0.2, v1.0, v2.1, etc.)
                - /^v[0-9]+\.[0-9]+/
            tags:
              only:
                - /.+/
      # Increase chart version for master, this will end up trigger deployment on dev
      - increase_chart_version_master:
          requires: [publish_child_chain]
          filters:
            branches:
              only:
                - master
      # Increase chart version for new release
      - increase_chart_version_release:
          requires: [publish_child_chain]
          filters: &only_release_tag
            branches:
              ignore: /.*/
            tags:
              only:
                # eg. v1.0.3-pre.0, v1.0.3, ...
                - /^v[0-9]+\.[0-9]+\.[0-9]+.*/
